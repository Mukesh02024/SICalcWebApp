
@using SICalcWebApp.Areas.RiceMill.Utility
@model SICalcWebApp.Areas.RiceMill.Models.MillingProcess

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Milling  Machine Dashboard</title>
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css">

    <style>
        /* Blinking effect for status */
        .blinking {
            animation: blinkingText 0.3s infinite; /* Reduced duration for faster blinking */
            color: brown;
        }

        .small-input {
            max-width: 200px;
        }

        @@keyframes blinkingText {
            0% {
                opacity: 1;
            }

            50% {
                opacity: 0;
            }

            100% {
                opacity: 1;
            }
        }
    </style>

</head>
<body>
    <div class="container mt-5">
        <h1>Milling  Machine Dashboard</h1>
        <hr />


        <p><strong>Batch ID:</strong> @Model.BatchId</p>
        <!-- Blinking Status -->
        <p><strong>Status:</strong> <span class="blinking">@Model.ProcessStatus</span></p>

        <!-- Start Time in new format -->
        <p>
            <strong>Start Time:</strong> @(Model.StartTime.HasValue
            ? Model.StartTime.Value.ToString("HH:mm:ss (dd-MM-yyyy)")
            : "N/A")
        </p>

        <!-- Pause Button -->
        @if (Model.ProcessStatus == "In Progress")
        {
            <button class="btn btn-warning" onclick="showPauseForm()">Pause</button>
        }

        <!-- Resume and End Buttons -->
        @if (Model.ProcessStatus == "Paused")
        {
            <button class="btn btn-success" onclick="showResumeForm()">Resume</button>
        }

        @if (Model.ProcessStatus == "In Progress" || Model.ProcessStatus == "Paused")
        {
           @*  <button class="btn btn-danger" onclick="performAction('end', '@Model.BatchId')">End</button> *@
            <button class="btn btn-danger" onclick="showEndForm()">End</button>
        }

        <!-- Pause Reason Form -->
        <div id="pauseReasonForm" class="mt-3 small-input" style="display: none;">
            <h4>Pause Reason</h4>
            <div class="form-group">
                <label for="pauseReason">Select Reason:</label>
                <select id="pauseReason" class="form-control">
                    @foreach (var reason in PauseReasons.Reasons)
                    {
                        <option value="@reason">@reason</option>
                    }
                </select>
            </div>

            <div class="form-group">
                <label for="PauseTime">Pause Time:</label>
                <input id="PauseTime" class="form-control " type="datetime-local" />
            </div>
            <button id="submitPauseReasonButton" class="btn btn-primary">Submit</button>
        </div>





        <div id="resumeForm" class="mt-3 small-input" style="display: none;">
            <h4>Resume Process</h4>
            <div class="form-group">
                <label for="ResumeTime">Select Resume Time:</label>
                <input id="resumeTime" class="form-control " type="datetime-local" />
            </div>
            <button class="btn btn-primary" id="submitResumeTime">Submit</button>
        </div>







        <div id="endForm" class="mt-3 small-input" style="display: none;">
      @*       <h4>Unload Sortex Bunker</h4>
            <div class="form-group">


                <label asp-for="SortexBunkerName">Sortex Name</label>
                <select asp-for="SortexBunkerName" class="form-control">
                    <option value="">-- Select Sortex --</option>
                    @foreach (var sortexname in ViewBag.SortexList as List<string>)
                    {
                        <option value="@sortexname">@sortexname</option>
                    }
                </select>
                <span asp-validation-for="SortexBunkerName" class="text-danger"></span>
            </div> *@

            <div class="form-group">
                <label for="EndTime">End Time:</label>
                <input id="EndTime" class="form-control" type="datetime-local" />
            </div>

            <button id="submitEndButton" class="btn btn-primary">Complete Process</button>
        </div>


 

    </div>

    <script>


            document.addEventListener("DOMContentLoaded", function () {
            // Automatically set current date and time in local format
            const now = new Date();
            const formattedDateTime = now.getFullYear() + '-' +
                String(now.getMonth() + 1).padStart(2, '0') + '-' +
                String(now.getDate()).padStart(2, '0') + 'T' +
                String(now.getHours()).padStart(2, '0') + ':' +
                String(now.getMinutes()).padStart(2, '0');

            const datetimeFields = document.querySelectorAll('input[type="datetime-local"]');
            datetimeFields.forEach((field) => {
                field.value = formattedDateTime;  // Set default to current date and time
                field.max = formattedDateTime;   // Restrict future date selection
                field.addEventListener("change", function () {
                    field.blur(); // Remove focus to close the picker
                });
            });
        });




                function showEndForm() {
            // Check if any bunker is empty
             const tenant = "@(Context.Session.GetString("Tenant"))";
             const url=`/${tenant}/RiceMill/Milling/CheckBunkerStatus`;
          fetch(url, {
             method: 'POST',
                headers: { 'Content-Type': 'application/json' },
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    // If a bunker is empty, show the "End" form
                    document.getElementById("endForm").style.display = "block";
                    document.getElementById("pauseReasonForm").style.display = "none";
                    document.getElementById("resumeForm").style.display = "none";
                } else {
                    // Display the alert message
                    alert(data.message);
                }
            })
            .catch(error => {
                console.error("Error checking bunker status:", error);
                alert("An error occurred while checking bunker status.");
            });
        }

  



        // Show Pause Form
        function showPauseForm() {
            document.getElementById("pauseReasonForm").style.display = "block";
             document.getElementById("endForm").style.display = "none";

                    document.getElementById("resumeForm").style.display = "none";

        }

        // Perform Action (Pause, Resume, End)
        function performAction(action, batchId, pauseReason = null,unloadBunker = null,pauseTime=null,endTime=null,resumeTime=null) {

         console.log("Action:", action);
        console.log("Batch ID:", batchId);
        console.log("Pause Reason:", pauseReason);
        console.log("Unload Bunker:", unloadBunker); // This should work now if unloadBunker is passed correctly
        console.log("PauseTime:", pauseTime);
                 const tenant = "@(Context.Session.GetString("Tenant"))"; // Retrieve tenant from session
            const urlMap = {
                pause: `/${tenant}/RiceMill/Milling/PauseMill`,
                resume: `/${tenant}/RiceMill/Milling/ResumeMill`,
                end: `/${tenant}/RiceMill/Milling/EndMill`,
            };

            // const body = pauseReason
            //     ? `batchId=${encodeURIComponent(batchId)}&pauseReason=${encodeURIComponent(pauseReason)}`
            //     : `batchId=${encodeURIComponent(batchId)}`;


                // Initialize the body with batchId
            // Initialize the body with batchId
        let body = `batchId=${encodeURIComponent(batchId)}`;

        // Add pauseReason if action is 'pause'
        if (action === 'pause' && pauseReason) {
            body += `&pauseReason=${encodeURIComponent(pauseReason)}`;
            body += `&pauseTime=${encodeURIComponent(pauseTime)}`;
        }
          if (action === 'resume' && resumeTime) {
            body += `&resumeTime=${encodeURIComponent(resumeTime)}`;
            
        }

        // Add unloadBunker if action is 'end' and unloadBunker is provided
               if (action === 'end' && unloadBunker) {
            body += `&SortexBunker=${encodeURIComponent(unloadBunker)}`; // Send unloadBunker as SortexBunker
            body += `&endTime=${encodeURIComponent(endTime)}`;
        }
     

            fetch(urlMap[action], {
                method: 'POST',
                headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
                body: body,
            })
                .then((response) => response.json())
                .then((data) => {
                    if (data.success) {
                        window.location.href = `/${tenant}/RiceMill/Milling/Dashboard?batchId=${batchId}`;
                    } else {
                        alert(data.message);
                    }
                })
                .catch((error) => {
                    console.error(`Error during '${action}':`, error);
                });
        }
        

         document.getElementById("submitEndButton").addEventListener("click", function () 
         {
            const batchId = "@Model.BatchId"; // Dynamically populated from the model
    
             const endTime = document.getElementById("EndTime").value;
            
           
                  if (!endTime) {
            alert("Please select a Time.");
                  
            return;
        }
     
            // Call performAction with 'end', batchId, and unloadBunker as arguments
            performAction('end', batchId, null, null,null,endTime); // Pass unloadBunker as the last argument
        });
        



        // Pause Form Submission
        document.getElementById("submitPauseReasonButton").addEventListener("click", function () {
            const batchId = "@Model.BatchId"; // Dynamically populated from the model
            const pauseReason = document.getElementById("pauseReason").value;
            const pauseTime=document.getElementById("PauseTime").value;
            performAction('pause', batchId, pauseReason,null,pauseTime);
        });



             function showResumeForm() {
            document.getElementById("resumeForm").style.display = "block";

                        document.getElementById("pauseReasonForm").style.display = "none";
             document.getElementById("endForm").style.display = "none";

              
        }

            // Pause Form Submission
        document.getElementById("submitResumeTime").addEventListener("click", function () {
            const batchId = "@Model.BatchId"; // Dynamically populated from the model
            const resumeTime=document.getElementById("resumeTime").value;
            performAction('resume', batchId, null,null,null,null,resumeTime);
        });





    </script>
</body>
</html>




