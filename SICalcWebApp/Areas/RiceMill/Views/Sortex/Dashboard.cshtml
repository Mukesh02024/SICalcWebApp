@*
  this is for sortex dashboard
*@
@{
}

@using SICalcWebApp.Areas.RiceMill.Utility
@model SICalcWebApp.Areas.RiceMill.Models.SortexProcess

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Sortex Machine Dashboard</title>
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css">
    <style>
        /* Blinking effect for status */
        .blinking {
            animation: blinkingText 0.3s infinite; /* Reduced duration for faster blinking */
            color: brown;
        }

        .small-input {
            max-width: 200px;
        }

        @@keyframes blinkingText {
            0% {
                opacity: 1;
            }

            50% {
                opacity: 0;
            }

            100% {
                opacity: 1;
            }
        }
    </style>

</head>
<body>
    <div class="container mt-5">
        <h1>Sortex Machine Dashboard</h1>
        <hr />


        <p><strong>Batch ID:</strong> @Model.BatchId</p>
        <!-- Blinking Status -->
        <p><strong>Status:</strong> <span class="blinking">@Model.ProcessStatus</span></p>

        <!-- Start Time in new format -->
        <p>
            <strong>Start Time:</strong> @(Model.StartTime.HasValue
            ? Model.StartTime.Value.ToString("HH:mm:ss (dd-MM-yyyy)")
            : "N/A")
        </p>

        <!-- Pause Button -->
        @if (Model.ProcessStatus == "In Progress")
        {
            <button class="btn btn-warning" onclick="showPauseForm()">Pause</button>
        }

        <!-- Resume and End Buttons -->
        @if (Model.ProcessStatus == "Paused")
        {
            <button class="btn btn-success" onclick="showResumeForm()">Resume</button>
        }

        @if (Model.ProcessStatus == "In Progress" || Model.ProcessStatus == "Paused")
        {
            <button class="btn btn-danger" onclick="showEndForm()">End</button>
        }

        <!-- Pause Reason Form -->
        <div id="pauseReasonForm" class="mt-3" style="display: none;">
            <h4>Pause Reason</h4>
            <div class="form-group small-input">
                <label for="pauseReason">Select Reason:</label>
                <select id="pauseReason" class="form-control">
                    @foreach (var reason in PauseReasons.Reasons)
                    {
                        <option value="@reason">@reason</option>
                    }
                </select>
            </div>

            <div class="form-group">
                <label for="PauseTime">Pause Time:</label>
                <input id="PauseTime" class="form-control form-control-sm small-input" type="datetime-local" />
            </div>
            <button id="submitPauseReasonButton" class="btn btn-primary">Submit</button>
        </div>



        <div id="resumeForm" class="mt-3" style="display: none;">
            <h4>Resume Process</h4>
            <div class="form-group">
                
                <label for="ResumeTime">Resume Time:</label>
                <input id="ResumeTime" class="form-control form-control-sm small-input" type="datetime-local" />
            </div>

            <button id="submitResumeButton" class="btn btn-primary">Submit</button>
        </div>



        <div id="endForm" class="mt-3" style="display: none;">
            <h4>End Process</h4>
            <div class="form-group">

                <label for="EndTime">End Time:</label>
                <input id="EndTime" class="form-control form-control-sm small-input" type="datetime-local" />
            </div>

            <div class="form-group">
                <label for="EndWeight">End Weight:</label>
                <input id="EndWeight" class="form-control form-control-sm small-input" type="number" step="0.01" min="0.1" />
            </div>




            <button id="submitEndButton" class="btn btn-primary">Submit</button>
        </div>

    </div>

    <script>

             document.addEventListener("DOMContentLoaded", function () {
            // Automatically set current date and time in local format
            const now = new Date();
            const formattedDateTime = now.getFullYear() + '-' +
                String(now.getMonth() + 1).padStart(2, '0') + '-' +
                String(now.getDate()).padStart(2, '0') + 'T' +
                String(now.getHours()).padStart(2, '0') + ':' +
                String(now.getMinutes()).padStart(2, '0');

            const datetimeFields = document.querySelectorAll('input[type="datetime-local"]');
            datetimeFields.forEach((field) => {
                field.value = formattedDateTime;  // Set default to current date and time
                field.max = formattedDateTime;   // Restrict future date selection
                field.addEventListener("change", function () {
                    field.blur(); // Remove focus to close the picker
                });
            });
        });





           function showEndForm() {
            document.getElementById("endForm").style.display = "block";
             document.getElementById("resumeForm").style.display = "none";
              document.getElementById("pauseReasonForm").style.display = "none";
        }


            function showResumeForm() {
            document.getElementById("resumeForm").style.display = "block";
                document.getElementById("pauseReasonForm").style.display = "none";
                 document.getElementById("endForm").style.display = "none";
        }



        // Show Pause Form
        function showPauseForm() {
            document.getElementById("pauseReasonForm").style.display = "block";
            document.getElementById("endForm").style.display = "none";
            document.getElementById("resumeForm").style.display = "none";
        }

        // Perform Action (Pause, Resume, End)
        function performAction(action, batchId, pauseReason = null,pauseTime=null,resumeTime=null,endTime=null, endWeight = null) {
               const tenant = "@(Context.Session.GetString("Tenant"))"; // Retrieve tenant from session
            const urlMap = {
                pause: `/${tenant}/RiceMill/Sortex/PauseSortex`,
                resume: `/${tenant}/RiceMill/Sortex/ResumeSortex`,
                end: `/${tenant}/RiceMill/Sortex/EndSortex`,

            };
    
  

         let body = `batchId=${encodeURIComponent(batchId)}`;

        // Add pauseReason if action is 'pause'
        if (action === 'pause' && pauseReason) {
            body += `&pauseReason=${encodeURIComponent(pauseReason)}`;
            body += `&pauseTime=${encodeURIComponent(pauseTime)}`;
        }
          if (action === 'resume' && resumeTime) {
            body += `&resumeTime=${encodeURIComponent(resumeTime)}`;

        }

        // Add unloadBunker if action is 'end' and unloadBunker is provided
               if (action === 'end') 
               {
       
            body += `&endTime=${encodeURIComponent(endTime)}`;
             body += `&endWeight=${encodeURIComponent(endWeight)}`;
               }




            fetch(urlMap[action], {
                method: 'POST',
                headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
                body: body,
            })
                .then((response) => response.json())
                .then((data) => {
                    if (data.success) {
                        window.location.href = `/${tenant}/RiceMill/Sortex/Dashboard?batchId=${batchId}`;
                    } else {
                        alert(data.message);
                    }
                })
                .catch((error) => {
                    console.error(`Error during '${action}':`, error);
                });
        }

        // Pause Form Submission
        document.getElementById("submitPauseReasonButton").addEventListener("click", function () {
            const batchId = "@Model.BatchId"; // Dynamically populated from the model
            const pauseReason = document.getElementById("pauseReason").value;
            const pauseTime=document.getElementById("PauseTime").value;
            performAction('pause', batchId, pauseReason,pauseTime);
        });


        document.getElementById("submitResumeButton").addEventListener("click", function () {
            const batchId = "@Model.BatchId"; // Dynamically populated from the model
            
            const resumeTime=document.getElementById("ResumeTime").value;
            performAction('resume', batchId, null,null,resumeTime);
        });

        document.getElementById("submitEndButton").addEventListener("click", function () {
            const batchId = "@Model.BatchId"; // Dynamically populated from the model

            const endTime=document.getElementById("EndTime").value;
            const endWeight = document.getElementById("EndWeight").value; // Get EndWeight value

                 if (!endWeight || parseFloat(endWeight) < 0.1) {
            alert("End Weight is required and must be at least 0.1.");
            return;
        }
            performAction('end', batchId, null,null,null,endTime, endWeight);
        });

    </script>
</body>
</html>
