@using SICalcWebApp.Areas.RiceMill.Utility
@model SICalcWebApp.Areas.RiceMill.Models.DryerProcess

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Dryer Machine Dashboard</title>
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css">
    <style>
        /* Blinking effect for status */
        .blinking {
            animation: blinkingText 0.3s infinite; /* Reduced duration for faster blinking */
            color: brown;
        }

        .small-input {
            max-width: 200px;
        }

        @@keyframes blinkingText {
            0%

        {
            opacity: 1;
        }

        50% {
            opacity: 0;
        }

        100% {
            opacity: 1;
        }

        }
    </style>
</head>
<body>
    <div class="container mt-5">
        <h1>Dryer Machine Dashboard</h1>
        <hr />

        <p><strong>Batch ID:</strong> @Model.BatchId</p>
        <!-- Blinking Status -->
        <p><strong>Status:</strong> <span class="blinking">@Model.ProcessStatus</span></p>

        <!-- Start Time in new format -->
        <p>
            <strong>Start Time:</strong> @(Model.LoadTime.HasValue
            ? Model.LoadTime.Value.ToString("HH:mm:ss (dd-MM-yyyy)")
            : "N/A")
        </p>






        <!-- Pause Button -->
        @if (Model.ProcessStatus == "In Progress")
        {
            <button class="btn btn-warning" onclick="showPauseForm()">Pause</button>
        }

        <!-- Resume and End Buttons -->
        @if (Model.ProcessStatus == "Paused")
        {
            <button class="btn btn-success" onclick="showResumeForm()">Resume</button>
        }

        @if (Model.ProcessStatus == "In Progress" || Model.ProcessStatus == "Paused")
        {
            <button class="btn btn-danger" onclick="showEndForm()">End</button>
        }

        <!-- Pause Reason Form -->
        <div id="pauseReasonForm" class="mt-3 small-input" style="display: none;">
            <h4>Pause Process</h4>
            <div class="form-group">
                <label for="pauseReason">Select Reason:</label>
                <select id="pauseReason" class="form-control" asp-for="UnloadBunkerName">
                    @foreach (var reason in PauseReasons.Reasons)
                    {
                        <option value="@reason">@reason</option>
                    }
                </select>
            </div>


            <div class="form-group">
                <label for="PauseTime">Pause Time:</label>
                <input id="PauseTime" class="form-control" type="datetime-local" />
            </div>
            <button id="submitPauseReasonButton" class="btn btn-primary">Submit</button>
        </div>




        <div id="resumeTimeForm" class="mt-3 small-input" style="display: none;">
            <h4>Resume Process</h4>
            <div class="form-group">
                <label for="ResumeTime">Select Resume Time:</label>
                <input id="resumeTime" class="form-control" type="datetime-local" />
            </div>
            <button class="btn btn-primary" onclick="submitResumeTime()">Submit</button>
        </div>






        <!-- End Form -->
        <div id="endForm" class="mt-3 small-input" style="display: none;">
            <h4>End Process</h4>
            <div class="form-group">
                <label for="UnloadBunker">Unload Bunker Name</label>
                <select id="UnloadBunker" class="form-control" name="UnloadBunkerName">
                    <option value="">-- Select Unload Bunker --</option>
                    @foreach (var sortexname in ViewBag.SortexList as List<string>)
                    {
                        <option value="@sortexname">@sortexname</option>
                    }
                </select>
                <span asp-validation-for="UnloadBunkerName" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label for="UnloadTime">Select End Time:</label>
                <input id="UnloadTime" class="form-control" type="datetime-local" />
            </div>
            <button id="submitEndButton" class="btn btn-primary">Complete Process</button>
        </div>
    </div>

    <script>



               document.addEventListener("DOMContentLoaded", function () {
            // Automatically set current date and time in local format
            const now = new Date();
            const formattedDateTime = now.getFullYear() + '-' +
                String(now.getMonth() + 1).padStart(2, '0') + '-' +
                String(now.getDate()).padStart(2, '0') + 'T' +
                String(now.getHours()).padStart(2, '0') + ':' +
                String(now.getMinutes()).padStart(2, '0');

            const datetimeFields = document.querySelectorAll('input[type="datetime-local"]');
            datetimeFields.forEach((field) => {
                field.value = formattedDateTime;  // Set default to current date and time
                field.max = formattedDateTime;   // Restrict future date selection
                field.addEventListener("change", function () {
                    field.blur(); // Remove focus to close the picker
                });
            });
        });









          function showResumeForm() {
            document.getElementById("resumeTimeForm").style.display = "block";
                      document.getElementById("pauseReasonForm").style.display = "none";

           document.getElementById("endForm").style.display = "none";

        
             
        }

        function submitResumeTime() {
                const batchId = "@Model.BatchId"; // Populate dynamically
        const resumeTime = document.getElementById("resumeTime").value;

        if (!resumeTime) {
            alert("Please select a valid resume time.");
            return;
        }

        performAction('resume', batchId, null, null, null, resumeTime); // Pass resumeTime correctly
        }
















        // Show End Form
                function showEndForm() {
            // Check if any bunker is empty
            fetch('/RiceMill/Dryer/CheckBunkerStatus', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    // If a bunker is empty, show the "End" form
                    document.getElementById("endForm").style.display = "block";
                    document.getElementById("pauseReasonForm").style.display = "none";
                       document.getElementById("resumeTimeForm").style.display = "none";
                } else {
                    // Display the alert message
                    alert(data.message);
                }
            })
            .catch(error => {
                console.error("Error checking bunker status:", error);
                alert("An error occurred while checking bunker status.");
            });
        }


     




        // Show Pause Form
        function showPauseForm() {
            document.getElementById("pauseReasonForm").style.display = "block";

           document.getElementById("endForm").style.display = "none";
        
                       document.getElementById("resumeTimeForm").style.display = "none";
        }

        // Perform Action (Pause, Resume, End)
        function performAction(action, batchId, pauseReason = null, unloadBunker = null,pauseTime = null,resumeTime = null,unloadTime=null ) {
            console.log("Action:", action);
            console.log("Batch ID:", batchId);
            console.log("Pause Reason:", pauseReason);
            console.log("Unload Bunker:", unloadBunker);
            console.log("Pause Time:", pauseTime); // Log the pause time for debugging
            console.log("Resume Time:", resumeTime); // Log the pause time for debugging
             console.log("End Time:", unloadTime); // Log the pause time for debugging
            const urlMap = {
                pause: '/RiceMill/Dryer/PauseDryer',
                resume: '/RiceMill/Dryer/ResumeDryer',
                end: '/RiceMill/Dryer/EndDryer',
            };

            // Initialize the body with batchId
            let body = `batchId=${encodeURIComponent(batchId)}`;

            // Add pauseReason if action is 'pause'
            if (action === 'pause' && pauseReason) {
                body += `&pauseReason=${encodeURIComponent(pauseReason)}`;
                  body += `&pauseTime=${encodeURIComponent(pauseTime)}`;
            }

              if (action === 'resume' && resumeTime) {
                body += `&resumeTime=${encodeURIComponent(resumeTime)}`;
                  
            }


            // Add unloadBunker if action is 'end' and unloadBunker is provided
            if (action === 'end' && unloadBunker) {
                body += `&UnloadBunkerName=${encodeURIComponent(unloadBunker)}`;
                    body += `&unloadTime=${encodeURIComponent(unloadTime)}`;
            }

            fetch(urlMap[action], {
                method: 'POST',
                headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
                body: body,
            })
                .then((response) => response.json())
                .then((data) => {
                    if (data.success) {
                        window.location.href = `/RiceMill/dryer/Dashboard?batchId=${batchId}`;
                    } else {
                        alert(data.message);
                    }
                })
                .catch((error) => {
                    console.error(`Error during '${action}':`, error);
                });
        }

        // Submit End Button Logic
        document.getElementById("submitEndButton").addEventListener("click", function () {
            const batchId = "@Model.BatchId"; // Dynamically populated from the model
            const bunkerElement = document.getElementById("UnloadBunker");
               const unloadTimeElement = document.getElementById("UnloadTime");

            if (!bunkerElement) {
                alert("Unload Bunker dropdown not found.");
                return; // Prevent further action
            }

            const unloadBunker = bunkerElement.value;
            console.log("Selected Unload Bunker:", unloadBunker);

            if (!unloadBunker) {
                alert("Please select an Unload Bunker.");
                return; // Prevent the action from being performed if no bunker is selected
            }
                 const unloadTimeValue = unloadTimeElement.value;
                 console.log("Unload Time mukesh:", unloadTimeValue);  // Log the actual value

        if (!unloadBunker || !unloadTimeValue) {
                alert("Please select both Unload Bunker and Unload Time.");
                return;
            }

            console.log("Calling performAction with action 'end' and batchId:", batchId, "unloadBunker:", unloadBunker);
        performAction('end', batchId, null, unloadBunker, null, null,unloadTimeValue);
        });

        // Pause Form Submission
        document.getElementById("submitPauseReasonButton").addEventListener("click", function () {
            const batchId = "@Model.BatchId"; // Dynamically populated from the model
            const pauseReason = document.getElementById("pauseReason").value;
            const pauseTime = document.getElementById("PauseTime").value; // Get the pause time from the input field
            performAction('pause', batchId, pauseReason,null, pauseTime);
        });
    </script>
</body>
</html>
